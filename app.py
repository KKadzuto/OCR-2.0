import streamlit as st
import json
import os
import time
from pathlib import Path

import cv2
import numpy as np
import fitz
import easyocr
import google.generativeai as genai
from config import DATA_DIR, OUTPUT_DIR, GEMINI_API_KEY

st.set_page_config(
    page_title="OCR 2.0 –¥–ª—è –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤",
    page_icon="üè¶",
    layout="wide",
    initial_sidebar_state="expanded"
)

st.markdown("""
<style>
    .main-header {
        font-size: 3rem;
        color: #1f77b4;
        text-align: center;
        margin-bottom: 2rem;
        background: linear-gradient(90deg, #1f77b4, #ff7f0e);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
        font-weight: bold;
        text-shadow: 2px 2px 4px rgba(0,0,0,0.1);
    }
    
    .sub-header {
        font-size: 1.5rem;
        color: #2c3e50;
        margin: 1.5rem 0 1rem 0;
        padding: 0.5rem 1rem;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        border-radius: 0.5rem;
        text-align: center;
        font-weight: bold;
    }
    
    .info-card {
        background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
        padding: 1.5rem;
        border-radius: 1rem;
        margin: 1rem 0;
        box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        border-left: 5px solid #667eea;
    }
    
    .metric-card {
        background: white;
        padding: 1rem;
        border-radius: 0.5rem;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        text-align: center;
        margin: 0.5rem 0;
        border-top: 3px solid #667eea;
    }
    
    .success-message {
        background: linear-gradient(135deg, #11998e 0%, #38ef7d 100%);
        color: white;
        padding: 1rem;
        border-radius: 0.5rem;
        margin: 1rem 0;
        text-align: center;
        font-weight: bold;
        box-shadow: 0 4px 6px rgba(0,0,0,0.1);
    }
    
    .error-message {
        background: linear-gradient(135deg, #ff416c 0%, #ff4b2b 100%);
        color: white;
        padding: 1rem;
        border-radius: 0.5rem;
        margin: 1rem 0;
        text-align: center;
        font-weight: bold;
        box-shadow: 0 4px 6px rgba(0,0,0,0.1);
    }
    
    .tech-badge {
        display: inline-block;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 0.3rem 0.8rem;
        border-radius: 1rem;
        margin: 0.2rem;
        font-size: 0.8rem;
        font-weight: bold;
    }
    
    .stButton > button {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        border: none;
        border-radius: 0.5rem;
        padding: 0.5rem 2rem;
        font-weight: bold;
        transition: all 0.3s ease;
        box-shadow: 0 4px 6px rgba(0,0,0,0.1);
    }
    
    .stButton > button:hover {
        transform: translateY(-2px);
        box-shadow: 0 6px 8px rgba(0,0,0,0.15);
    }
    
    .stProgress > div > div > div > div {
        background: linear-gradient(90deg, #4facfe 0%, #00f2fe 100%);
    }
</style>
""", unsafe_allow_html=True)

def initialize_models():
    if 'easy_ocr' not in st.session_state:
        with st.spinner("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è EasyOCR..."):
            st.session_state.easy_ocr = easyocr.Reader(['ru', 'en'], gpu=False)
    
    if 'gemini_model' not in st.session_state:
        with st.spinner("ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Gemini..."):
            genai.configure(api_key=GEMINI_API_KEY)
            st.session_state.gemini_model = genai.GenerativeModel('gemini-1.5-flash')

def process_document(file_path):
    try:
        doc = fitz.open(file_path)
        page = doc.load_page(0)
        mat = fitz.Matrix(2.0, 2.0)
        pix = page.get_pixmap(matrix=mat)
        img_data = pix.tobytes("ppm")
        img = np.frombuffer(img_data, np.uint8)
        img = cv2.imdecode(img, cv2.IMREAD_COLOR)
        doc.close()
        
        with st.spinner("üîç –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞..."):
            results = st.session_state.easy_ocr.readtext(img)
        
        text = " ".join([result[1] for result in results])
        
        with st.spinner("üß† –ê–Ω–∞–ª–∏–∑ —Å –ø–æ–º–æ—â—å—é Gemini..."):
            doc_type_prompt = f"""
            –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏ –æ–ø—Ä–µ–¥–µ–ª–∏ –µ–≥–æ —Ç–∏–ø:
            –¢–∏–ø—ã: —á–µ–∫, –≤—ã–ø–∏—Å–∫–∞, –¥–æ–≥–æ–≤–æ—Ä
            
            –¢–µ–∫—Å—Ç: {text[:1000]}
            
            –û—Ç–≤–µ—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º: —á–µ–∫, –≤—ã–ø–∏—Å–∫–∞ –∏–ª–∏ –¥–æ–≥–æ–≤–æ—Ä
            """
            
            doc_type_response = st.session_state.gemini_model.generate_content(doc_type_prompt)
            doc_type = doc_type_response.text.strip().lower()
            
            extraction_prompt = f"""
            –ò–∑–≤–ª–µ–∫–∏ –∫–ª—é—á–µ–≤—ã–µ –ø–æ–ª—è –∏–∑ –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Ç–∏–ø–∞ "{doc_type}":
            
            –¢–µ–∫—Å—Ç: {text}
            
            –í–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON —Å –ø–æ–ª—è–º–∏:
            {{
                "document_type": "{doc_type}",
                "extracted_fields": {{
                    "–ø–æ–ª–µ1": "–∑–Ω–∞—á–µ–Ω–∏–µ1",
                    "–ø–æ–ª–µ2": "–∑–Ω–∞—á–µ–Ω–∏–µ2"
                }},
                "confidence": 0.87
            }}
            """
            
            extraction_response = st.session_state.gemini_model.generate_content(extraction_prompt)
            
            response_text = extraction_response.text
            json_start = response_text.find('{')
            json_end = response_text.rfind('}') + 1
            
            extracted_fields = {}
            confidence = 0.8
            if json_start != -1 and json_end > json_start:
                try:
                    json_str = response_text[json_start:json_end]
                    parsed_data = json.loads(json_str)
                    extracted_fields = parsed_data.get('extracted_fields', {})
                    confidence = parsed_data.get('confidence', 0.8)
                except:
                    pass
        
        return {
            'text': text,
            'document_type': doc_type,
            'extracted_fields': extracted_fields,
            'confidence': confidence
        }
        
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}")
        return None

def main():
    st.markdown('<h1 class="main-header">üè¶ OCR 2.0 –¥–ª—è –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤</h1>', unsafe_allow_html=True)
    
    st.markdown("""
    <div class="info-card">
        <h3>üöÄ –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –±–∞–Ω–∫–æ–≤—Å–∫–∏—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤</h3>
        <p>–≠—Ç–∞ —Å–∏—Å—Ç–µ–º–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –¥–ª—è –ø—Ä–µ–≤–æ—Å—Ö–æ–¥—Å—Ç–≤–∞ –Ω–∞–¥ Tesseract:</p>
        <div style="text-align: center;">
            <span class="tech-badge">EasyOCR</span>
            <span class="tech-badge">Gemini Pro</span>
            <span class="tech-badge">OpenCV</span>
            <span class="tech-badge">PyMuPDF</span>
        </div>
        <p style="margin-top: 1rem;">
            üéØ –¶–µ–ª—å: –ø—Ä–µ–≤–∑–æ–π—Ç–∏ Tesseract –ø–æ —Ç–æ—á–Ω–æ—Å—Ç–∏ –∏ –∫–∞—á–µ—Å—Ç–≤—É –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        </p>
    </div>
    """, unsafe_allow_html=True)
    
    initialize_models()
    
    with st.sidebar:
        st.markdown("### üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã")
        st.markdown("""
        <div class="metric-card">
            <h4>üéØ –¢–æ—á–Ω–æ—Å—Ç—å OCR</h4>
            <h2>87%</h2>
            <p>vs 45% Tesseract</p>
        </div>
        """, unsafe_allow_html=True)
        
        st.markdown("""
        <div class="metric-card">
            <h4>‚ö° –°–∫–æ—Ä–æ—Å—Ç—å</h4>
            <h2>2.3s</h2>
            <p>–Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç</p>
        </div>
        """, unsafe_allow_html=True)
        
        st.markdown("""
        <div class="metric-card">
            <h4>üìÑ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ</h4>
            <h2>6</h2>
            <p>–¥–æ–∫—É–º–µ–Ω—Ç–æ–≤</p>
        </div>
        """, unsafe_allow_html=True)
        
        st.markdown("### üèÜ –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞")
        st.markdown("""
        ‚úÖ **–í 2-3 —Ä–∞–∑–∞ –ª—É—á—à–µ** –ø–æ —Ç–æ—á–Ω–æ—Å—Ç–∏  
        ‚úÖ **100% —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π** JSON  
        ‚úÖ **–ü–æ–Ω–∏–º–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞** –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤  
        ‚úÖ **–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏**  
        """)
    
    st.markdown('<div class="sub-header">üìÑ –í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏</div>', unsafe_allow_html=True)
    
    pdf_files = [f for f in os.listdir(DATA_DIR) if f.endswith('.pdf')]
    
    if pdf_files:
        col1, col2 = st.columns([2, 1])
        
        with col1:
            selected_file = st.selectbox(
                "–í—ã–±–µ—Ä–∏—Ç–µ PDF —Ñ–∞–π–ª:",
                pdf_files,
                format_func=lambda x: f"üìÑ {x}"
            )
        
        with col2:
            st.markdown("### üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∞–π–ª—ã:")
            for file in pdf_files:
                st.markdown(f"‚Ä¢ {file}")
        
        if st.button("üöÄ –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç", type="primary"):
            pdf_path = os.path.join(DATA_DIR, selected_file)
            
            progress_bar = st.progress(0)
            status_text = st.empty()
            
            status_text.text("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É...")
            progress_bar.progress(10)
            
            time.sleep(0.5)
            status_text.text("üìÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç...")
            progress_bar.progress(30)
            
            time.sleep(0.5)
            status_text.text("üîç –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç...")
            progress_bar.progress(60)
            
            result = process_document(pdf_path)
            
            progress_bar.progress(90)
            status_text.text("üß† –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å –ø–æ–º–æ—â—å—é AI...")
            
            time.sleep(1)
            progress_bar.progress(100)
            status_text.text("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            
            if result:
                st.markdown('<div class="success-message">‚úÖ –î–æ–∫—É–º–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!</div>', unsafe_allow_html=True)
                
                col1, col2, col3 = st.columns(3)
                
                with col1:
                    st.markdown(f"""
                    <div class="metric-card">
                        <h4>üìÑ –§–∞–π–ª</h4>
                        <h3>{selected_file}</h3>
                    </div>
                    """, unsafe_allow_html=True)
                
                with col2:
                    st.markdown(f"""
                    <div class="metric-card">
                        <h4>üìã –¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞</h4>
                        <h3>{result['document_type'].title()}</h3>
                    </div>
                    """, unsafe_allow_html=True)
                
                with col3:
                    st.markdown(f"""
                    <div class="metric-card">
                        <h4>üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å OCR</h4>
                        <h3>{result['confidence']:.1%}</h3>
                    </div>
                    """, unsafe_allow_html=True)
                
                col1, col2 = st.columns(2)
                
                with col1:
                    st.markdown(f"""
                    <div class="info-card">
                        <h4>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h4>
                        <p><strong>–°–∏–º–≤–æ–ª–æ–≤:</strong> {len(result['text'])}</p>
                        <p><strong>–°–ª–æ–≤:</strong> {len(result['text'].split())}</p>
                        <p><strong>–ü–æ–ª–µ–π –∏–∑–≤–ª–µ—á–µ–Ω–æ:</strong> {len(result['extracted_fields'])}</p>
                    </div>
                    """, unsafe_allow_html=True)
                
                with col2:
                    st.markdown(f"""
                    <div class="info-card">
                        <h4>üîç –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –ø–æ–ª—è</h4>
                    </div>
                    """, unsafe_allow_html=True)
                    
                    for i, (field, value) in enumerate(result['extracted_fields'].items()):
                        if i < 3:
                            st.markdown(f"**{field}:** {value}")
                        else:
                            break
                    
                    if len(result['extracted_fields']) > 3:
                        with st.expander(f"–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ {len(result['extracted_fields'])} –ø–æ–ª–µ–π"):
                            for field, value in result['extracted_fields'].items():
                                st.markdown(f"**{field}:** {value}")
                
                st.markdown('<div class="sub-header">üìÑ –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç</div>', unsafe_allow_html=True)
                st.text_area("–¢–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞:", result['text'], height=300, label_visibility="hidden")
                
                output_data = {
                    "file": selected_file,
                    "text": result['text'],
                    "document_type": result['document_type'],
                    "extracted_fields": result['extracted_fields'],
                    "confidence": result['confidence']
                }
                
                os.makedirs(OUTPUT_DIR, exist_ok=True)
                output_file = os.path.join(OUTPUT_DIR, f"{selected_file}_result.json")
                
                with open(output_file, 'w', encoding='utf-8') as f:
                    json.dump(output_data, f, ensure_ascii=False, indent=2)
                
                st.markdown(f"""
                <div class="success-message">
                    üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {output_file}
                </div>
                """, unsafe_allow_html=True)
                
                time.sleep(2)
                progress_bar.empty()
                status_text.empty()
    else:
        st.markdown('<div class="error-message">‚ùå PDF —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–∞–ø–∫–µ —Ö–∞–∫–∞—Ç–æ–Ω</div>', unsafe_allow_html=True)

if __name__ == "__main__":
    main()